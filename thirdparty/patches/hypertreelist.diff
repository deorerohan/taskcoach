--- agw-old/hypertreelist.py	2012-10-14 17:49:22.000000000 +0200
+++ agw-new/hypertreelist.py	2012-12-27 16:20:40.000000000 +0100
@@ -1403,11 +1403,13 @@
                 maincol = theCtrl.GetMainColumn()
 
                 # check for above/below middle
                 y_mid = self._y + h/2
-                if point.y < y_mid:
+                y_mid1 = self._y + h/3
+                y_mid2 = self._y + 2*h/3
+                if point.y < y_mid1:
                     flags |= wx.TREE_HITTEST_ONITEMUPPERPART
-                else:
+                elif point.y > y_mid2:
                     flags |= wx.TREE_HITTEST_ONITEMLOWERPART
                 
                 # check for button hit
                 if self.HasPlus() and theCtrl.HasButtons():
@@ -2349,9 +2351,9 @@
 # ----------------------------------------------------------------------------
 # operations
 # ----------------------------------------------------------------------------
 
-    def DoInsertItem(self, parent, previous, text, ct_type=0, wnd=None, image=-1, selImage=-1, data=None):
+    def DoInsertItem(self, parent, previous, text, ct_type=0, wnd=None, image=-1, selImage=-1, data=None, separator=False):
         """
         Actually inserts an item in the tree.
 
         :param `parentId`: an instance of L{TreeListItem} representing the
@@ -2795,9 +2797,23 @@
                 wndx = 0
                 if wnd:
                     wndx, wndy = item.GetWindowSize(self._main_column)
 
-                itemrect = wx.Rect(0, item.GetY() + off_h, total_w-1, total_h - off_h)
+                if item.PartialHilight():
+                    itemrect = wx.Rect(0, item.GetY() + off_h, total_w-1, total_h - off_h)
+                    dc.SetBrush(wx.Brush(colBg, wx.SOLID))
+                    dc.DrawRectangleRect(itemrect)
+
+                itemh = total_h - off_h
+                itemy = item.GetY()
+
+                if item.PartialHilight() == wx.TREE_HITTEST_ONITEMUPPERPART:
+                    itemh = itemh // 3
+                elif item.PartialHilight() == wx.TREE_HITTEST_ONITEMLOWERPART:
+                    itemh = itemh // 3
+                    itemy += total_h - off_h - itemh
+
+                itemrect = wx.Rect(0, itemy, total_w-1, itemh)
                 
                 if self._usegradients:
                     if self._gradientstyle == 0:   # Horizontal
                         self.DrawHorizontalGradient(dc, itemrect, self._hasFocus)
@@ -2813,10 +2829,13 @@
                     else:
                         dc.SetBrush((self._hasFocus and [self._hilightBrush] or [self._hilightUnfocusedBrush])[0])
                         dc.SetPen((self._hasFocus and [self._borderPen] or [wx.TRANSPARENT_PEN])[0])
                         dc.DrawRectangleRect(itemrect)
-                
-                dc.SetTextForeground(colTextHilight)
+
+                if item.PartialHilight():
+                    dc.SetTextForeground(colText)
+                else:
+                    dc.SetTextForeground(colTextHilight)
 
             # On GTK+ 2, drawing a 'normal' background is wrong for themes that
             # don't allow backgrounds to be customized. Not drawing the background,
             # except for custom item backgrounds, works for both kinds of theme.
@@ -2921,9 +2940,12 @@
                                 wx.RendererNative.Get().DrawItemSelectionRect(self._owner, dc, itemrect, flags) 
                             else:
                                 dc.DrawRectangleRect(itemrect)
 
-                        dc.SetTextForeground(colTextHilight)
+                        if item.PartialHilight():
+                            dc.SetTextForeground(colText)
+                        else:
+                            dc.SetTextForeground(colTextHilight)
 
                     elif item == self._current:
                         dc.SetPen((self._hasFocus and [wx.BLACK_PEN] or [wx.TRANSPARENT_PEN])[0])
                     
@@ -2995,9 +3017,9 @@
                 dc.SetTextForeground(self._disabledColour)
                 _paintText(text, textrect, alignment)
                 dc.SetTextForeground(foreground)
             else:
-                if wx.Platform == "__WXMAC__" and item.IsSelected() and self._hasFocus:
+                if wx.Platform == "__WXMAC__" and item.IsSelected() and self._hasFocus and not item.PartialHilight():
                     dc.SetTextForeground(wx.WHITE)
                 _paintText(text, textrect, alignment)
 
             wnd = item.GetWindow(i)            
@@ -3512,21 +3534,27 @@
                 if self._countDrag == 0 and item:
                     self._oldItem = self._current
                     self._oldSelection = self._current
 
+                hitflags = flags & (wx.TREE_HITTEST_ONITEMLOWERPART|wx.TREE_HITTEST_ONITEMUPPERPART)
+
                 if item != self._dropTarget:
                         
                     # unhighlight the previous drop target
                     if self._dropTarget:
                         self._dropTarget.SetHilight(False)
                         self.RefreshLine(self._dropTarget)
                     if item:
                         item.SetHilight(True)
+                        item.SetPartialHilight(hitflags)
                         self.RefreshLine(item)
                         self._countDrag = self._countDrag + 1
                     self._dropTarget = item
 
                     self.Update()
+                elif item and item.PartialHilight() != hitflags:
+                    item.SetPartialHilight(hitflags)
+                    self.RefreshLine(item)
 
                 if self._countDrag >= 3 and self._oldItem is not None:
                     # Here I am trying to avoid ugly repainting problems... hope it works
                     self.RefreshLine(self._oldItem)
