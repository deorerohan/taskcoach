# -*- python -*-

# Task Coach - Your friendly task manager
# Copyright (C) 2004-2016 Task Coach developers <developers@taskcoach.org>
#
# Task Coach is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Task Coach is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


c = BuildmasterConfig = {}

BASEURL = 'https://svn.code.sf.net/p/taskcoach/code/'

PASSWORD = file('.passwd', 'rb').readlines()[0].strip()
USERPASSWORD = file('.userpasswd', 'rb').readlines()[0].strip()

# Warning: put release branch first.
BRANCHES = [
    ('Release1_4_Branch', 'LastRelease', 'rel'),
    ('trunk', 'Trunk', 'trunk'),
    ]

####### BUILDSLAVES

from buildbot.buildslave import BuildSlave
from buildbot.steps.trigger import Trigger
from buildbot.schedulers.forcesched import ForceScheduler

c['slaves'] = [BuildSlave("WinXPSP3", PASSWORD, max_builds=1),
               BuildSlave("Ubuntu10", PASSWORD, max_builds=1),
               BuildSlave("Fedora14", PASSWORD, max_builds=1),
               BuildSlave("OpenSuse", PASSWORD, max_builds=1),
               BuildSlave("MacOS", PASSWORD, max_builds=1),
               BuildSlave("Release", PASSWORD, max_builds=1)]

c['slavePortnum'] = 9989

####### CHANGESOURCES

# SourceForge does not (yet) provide a buildbot notification
# post-commit hook. There is a feature request for this though
# (https://sourceforge.net/tracker/?func=detail&aid=1633682&group_id=1&atid=350001)

#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

from buildbot.changes.svnpoller import SVNPoller, split_file_branches
c['change_source'] = SVNPoller(BASEURL,
                               pollinterval=10*60,
                               split_file=split_file_branches)

####### SCHEDULERS

from buildbot.scheduler import Scheduler, Triggerable

c['schedulers'] = []
forceBuilders = ['Release']

for branchName, longName, shortName in BRANCHES:
    branch = None if branchName == 'trunk' else 'branches/%s' % branchName
    for platform in ['Win32', 'Ubuntu10', 'Fedora14', 'OpenSuse', 'MacOS']:
        c['schedulers'].append(Scheduler(name='%s%s' % (longName, platform),
                                         branch=branch,
                                         treeStableTimer=0,
                                         builderNames=['%s-%s' % (platform.lower(), shortName)]))
        forceBuilders.append('%s-%s' % (platform.lower(), shortName))

# Release schedulers

c['schedulers'].append(Triggerable(name="Release",
                                   builderNames=['macos-release', 'windows-release', 'ubuntu10-release', 'fedora14-release', 'opensuse-release']))
c['schedulers'].append(Triggerable(name="PPARelease",
                                   builderNames=['ubuntu10-pparelease']))

# Force schedulers

c['schedulers'].append(ForceScheduler(name="Force", builderNames=forceBuilders))

####### BUILDERS

import os, sys
sys.path.insert(0, os.getcwd())
import tcbuild
reload(tcbuild)

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile

c['builders'] = []

# For  each  branch,  all  platforms  should at  least  make  cleanup,
# revision, integration, the  platform-specific package or the generic
# package used  on this platform, and distribution  tests.  Unit tests
# are skipped for some  platforms (MacOS) due to unknown circumstances
# making them crash randomly.

# Each generic  package format may  be used by several  platforms, but
# only one  build is uploaded to  the master: the Fedora  14 build for
# RPM and SRPM and the Ubuntu 10 build for DEB.

# Coverage tests  must only be run  on different OSes (no  need to run
# them  on Fedora if  they are  run on  Ubuntu), so  they run  only on
# Ubuntu  10  and Win32  (not  MacOS since  the  unit  tests can't  be
# launched from the slave there).

# Language tests, documentation generation and source (tar.gz and zip)
# need only be run on one platform; this would be Ubuntu 10.

def addCommonStartSteps(f, skipUnitTests=False, skipIntegrationTests=False, **kwargs):
    f.addStep(tcbuild.Revert(**kwargs))
    f.addStep(tcbuild.Cleanup(**kwargs))
    f.addStep(tcbuild.Revision(**kwargs))
    if not skipUnitTests:
        f.addStep(tcbuild.UnitTests(**kwargs))
    if not skipIntegrationTests:
        f.addStep(tcbuild.IntegrationTests(**kwargs))

def addCommonEndSteps(f, **kwargs):
    f.addStep(tcbuild.DistributionTests(**kwargs))

# Main release builder

f = factory.BuildFactory()
f.addStep(tcbuild.CleanupReleaseStep())
f.addStep(Trigger(schedulerNames=['Release'], waitForFinish=True, set_properties=dict(release=True)))
f.addStep(tcbuild.ZipReleaseStep())

c['builders'].append(dict(name='Release', slavename='Release',
                          builddir='release', factory=f))

for branchName, longName, shortName in BRANCHES:
    svnargs=dict(svnurl=BASEURL + 'trunk') if branchName == 'trunk' else dict(baseURL=BASEURL)
    svnargs['retry'] = (30, 5)

    workdir = 'build/taskcoach'

    # Win32

    f = factory.BuildFactory()

    f.addStep(SVN(**svnargs))
    addCommonStartSteps(f, workdir=workdir, skipUnitTests=True)
    f.addStep(tcbuild.BuildSourceZip(workdir=workdir))
    f.addStep(tcbuild.UploadSourceZip(workdir=workdir))
    f.addStep(tcbuild.BuildEXE(workdir=workdir))
    f.addStep(tcbuild.UploadEXE(workdir=workdir))
    f.addStep(tcbuild.BuildWinPenPack(workdir=workdir))
    f.addStep(tcbuild.UploadWinPenPack(workdir=workdir))
    f.addStep(tcbuild.BuildPortableApps(workdir=workdir))
    f.addStep(tcbuild.UploadPortableApps(workdir=workdir))
    addCommonEndSteps(f, workdir=workdir)
    f.addStep(tcbuild.KillEXE(workdir=workdir))

    c['builders'].append(dict(name='win32-%s' % shortName,
                              slavename='WinXPSP3',
                              builddir='%s-win32' % shortName,
                              factory=f))

    # Ubuntu 10

    f = factory.BuildFactory()

    f.addStep(SVN(**svnargs))
    addCommonStartSteps(f, workdir=workdir)
    if shortName == 'rel':
        f.addStep(tcbuild.LanguageTests(workdir=workdir))
    f.addStep(tcbuild.Epydoc(workdir=workdir))
    f.addStep(tcbuild.UploadDoc(workdir=workdir))
    f.addStep(tcbuild.Cleanup(workdir=workdir))
    f.addStep(tcbuild.Revision(workdir=workdir))
    f.addStep(tcbuild.BuildSourceTar(workdir=workdir))
    f.addStep(tcbuild.UploadSourceTar(workdir=workdir))
    f.addStep(tcbuild.BuildSourceRaw(workdir=workdir))
    f.addStep(tcbuild.UploadSourceRaw(workdir=workdir))
    f.addStep(tcbuild.BuildDEB(workdir=workdir))
    f.addStep(tcbuild.UploadDEB(workdir=workdir))
    f.addStep(tcbuild.UploadChangelog(workdir=workdir))
    if shortName == 'rel':
        f.addStep(tcbuild.PPA(name='rel', workdir=workdir))
    elif branchName == 'trunk':
        f.addStep(tcbuild.PPA(name='relnext', workdir=workdir))
    f.addStep(tcbuild.PylintStep(workdir=workdir))
    f.addStep(tcbuild.PylintUploadStep(workdir=workdir))
    f.addStep(tcbuild.Coverage(workdir=workdir))
    f.addStep(tcbuild.UploadCoverage(workdir=workdir))
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='ubuntu10-%s' % shortName,
                              slavename='Ubuntu10',
                              builddir='%s-ubuntu10' % shortName,
                              factory=f))

    # Fedora 14

    f = factory.BuildFactory()

    f.addStep(SVN(**svnargs))
    addCommonStartSteps(f, workdir=workdir)
    f.addStep(tcbuild.BuildRPM(workdir=workdir))
    f.addStep(tcbuild.UploadRPM(workdir=workdir))
    f.addStep(tcbuild.Cleanup(workdir=workdir))
    f.addStep(tcbuild.Revision(workdir=workdir))
    f.addStep(tcbuild.BuildSRPM(workdir=workdir))
    f.addStep(tcbuild.UploadSRPM(workdir=workdir))
    f.addStep(tcbuild.Cleanup(workdir=workdir))
    f.addStep(tcbuild.Revision(workdir=workdir))
    f.addStep(tcbuild.BuildFedora14(workdir=workdir))
    f.addStep(tcbuild.UploadFedora14(workdir=workdir))
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='fedora14-%s' % shortName,
                              slavename='Fedora14',
                              builddir='%s-fedora14' % shortName,
                              factory=f))

    # OpenSuse

    f = factory.BuildFactory()

    f.addStep(SVN(**svnargs))
    addCommonStartSteps(f, skipUnitTests=True, skipIntegrationTests=True, workdir=workdir)
    f.addStep(tcbuild.BuildOpenSuse(workdir=workdir))
    f.addStep(tcbuild.UploadOpenSuse(workdir=workdir))

    c['builders'].append(dict(name='opensuse-%s' % shortName,
                              slavename='OpenSuse',
                              builddir='%s-opensuse' % shortName,
                              factory=f))

    # MacOS

    f = factory.BuildFactory()

    f.addStep(SVN(**svnargs))
    addCommonStartSteps(f, skipUnitTests=True, skipIntegrationTests=True, workdir=workdir)
    f.addStep(tcbuild.BuildDMG(workdir=workdir))
    f.addStep(tcbuild.UploadDMG(workdir=workdir))
    addCommonEndSteps(f, workdir=workdir)

    c['builders'].append(dict(name='macos-%s' % shortName,
                              slavename='MacOS',
                              builddir='%s-macos' % shortName,
                              factory=f))

####### Release

f = factory.BuildFactory()
f.addStep(SVN(baseURL=BASEURL, defaultBranch='branches/%s' % BRANCHES[0][0], retry=(30, 5)))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDMG(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDMG(workdir='build/taskcoach'))

c['builders'].append(dict(name='macos-release', slavename='MacOS',
                          builddir='release-macos', factory=f))

f = factory.BuildFactory()
f.addStep(SVN(baseURL=BASEURL, defaultBranch='branches/%s' % BRANCHES[0][0], retry=(30, 5)))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildEXE(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadEXE(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSourceZip(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSourceZip(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildWinPenPack(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadWinPenPack(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildPortableApps(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadPortableApps(workdir='build/taskcoach'))

c['builders'].append(dict(name='windows-release', slavename='WinXPSP3',
                          builddir='release-windows', factory=f))

f = factory.BuildFactory()
f.addStep(SVN(baseURL=BASEURL, defaultBranch='branches/%s' % BRANCHES[0][0], retry=(30, 5)))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildDEB(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadDEB(workdir='build/taskcoach'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSourceTar(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSourceTar(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSourceRaw(workdir=workdir))
f.addStep(tcbuild.UploadSourceRaw(workdir='build/taskcoach'))
f.addStep(tcbuild.ReleaseTests(workdir=workdir))
f.addStep(Trigger(schedulerNames=['PPARelease'], waitForFinish=False))

c['builders'].append(dict(name='ubuntu10-release', slavename='Ubuntu10',
                          builddir='release-ubuntu10', factory=f))

f = factory.BuildFactory()
f.addStep(SVN(baseURL=BASEURL, defaultBranch='branches/%s' % BRANCHES[0][0], retry=(30, 5)))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildSRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadSRPM(workdir='build/taskcoach'))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildFedora14(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadFedora14(workdir='build/taskcoach'))

c['builders'].append(dict(name='fedora14-release', slavename='Fedora14',
                          builddir='release-fedora14', factory=f))

f = factory.BuildFactory()
f.addStep(SVN(baseURL=BASEURL, defaultBranch='branches/%s' % BRANCHES[0][0], retry=(30, 5)))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.BuildOpenSuse(workdir='build/taskcoach'))
f.addStep(tcbuild.UploadOpenSuse(workdir='build/taskcoach'))

c['builders'].append(dict(name='opensuse-release', slavename='OpenSuse',
                          builddir='release-opensuse', factory=f))

f = factory.BuildFactory()
f.addStep(SVN(baseURL=BASEURL, defaultBranch='branches/%s' % BRANCHES[0][0], retry=(30, 5)))
f.addStep(tcbuild.Cleanup(workdir='build/taskcoach'))
f.addStep(tcbuild.PPA(workdir='build/taskcoach', name='release'))

c['builders'].append(dict(name='ubuntu10-pparelease', slavename='Ubuntu10',
                          builddir='ubuntu10-pparelease', factory=f))

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
from buildbot.status.web.authz import Authz
from buildbot.status.web.auth import BasicAuth

c['status'].append(html.WebStatus(http_port=8010,
                                  authz=Authz(auth=BasicAuth([('fraca7', USERPASSWORD), ('frank', USERPASSWORD), ('aaron', USERPASSWORD)]), forceBuild='auth', cancelPendingBuild='auth')))

from buildbot.status import mail
c['status'].append(mail.MailNotifier(fromaddr="fraca7@free.fr",
                                     sendToInterestedUsers=True,
                                     mode='failing',
                                     relayhost='smtp.free.fr',
                                     lookup=tcbuild.TaskCoachEmailLookup()))

c['status'].append(mail.MailNotifier(fromaddr='fraca7@free.fr',
                                     sendToInterestedUsers=False,
                                     mode='all',
                                     relayhost='smtp.free.fr',
                                     extraRecipients=('fraca7@free.fr', 'frank@niessink.com'),
                                     builders=['Release']))

from buildbot.status.client import PBListener
c['status'].append(PBListener(port=8011, user='taskcoach', passwd=PASSWORD))

from buildbot.process.users import manual
c['user_managers'] = []
c['user_managers'].append(manual.CommandlineUserManager(username="taskcoach",
                                                        passwd=PASSWORD,
                                                        port=9990))

####### PROJECT IDENTITY

c['projectName'] = "TaskCoach"
c['projectURL'] = "http://www.taskcoach.org/"

c['buildbotURL'] = "http://www.fraca7.net:8010/"
